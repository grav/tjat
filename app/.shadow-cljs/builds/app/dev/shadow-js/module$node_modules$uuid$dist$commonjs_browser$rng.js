["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/uuid/dist/commonjs-browser/rng.js"],"~:js","shadow$provide.module$node_modules$uuid$dist$commonjs_browser$rng = function(global, require, module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.default = function() {\n    if (!getRandomValues && (getRandomValues = \"undefined\" !== typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !getRandomValues)) {\n      throw Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n    }\n    return getRandomValues(rnds8);\n  };\n  let getRandomValues;\n  const rnds8 = new Uint8Array(16);\n};\n","~:source","shadow$provide[\"module$node_modules$uuid$dist$commonjs_browser$rng\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1756239699947,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$uuid$dist$commonjs_browser$rng.js\",\n\"lineCount\":12,\n\"mappings\":\"AAAAA,cAAA,CAAA,kDAAA,GAAuE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG/GC,QAAOC,CAAAA,cAAP,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAH,SAAQI,CAAAA,OAAR,GAOAC,QAAY,EAAG;AAEb,QAAI,CAACC,eAAL,KAEEA,eAEI,GAFgC,WAEhC,KAFc,MAAOC,OAErB,IAF+CA,MAAOD,CAAAA,eAEtD,IAFyEC,MAAOD,CAAAA,eAAgBE,CAAAA,IAAvB,CAA4BD,MAA5B,CAEzE,EAAA,CAACD,eAJP;AAKI,YAAUG,KAAJ,CAAU,0GAAV,CAAN;AALJ;AASA,WAAOH,eAAA,CAAgBI,KAAhB,CAAP;AAXa,GAPf;AAIA,MAAIJ,eAAJ;AACA,QAAMI,QAAQ,IAAIC,UAAJ,CAAe,EAAf,CAAd;AAX+G,CAA/G;;\",\n\"sources\":[\"node_modules/uuid/dist/commonjs-browser/rng.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$uuid$dist$commonjs_browser$rng\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = rng;\\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\\n// require the crypto API and do not support built-in fallback to lower quality random number\\n// generators (like Math.random()).\\nlet getRandomValues;\\nconst rnds8 = new Uint8Array(16);\\n\\nfunction rng() {\\n  // lazy load so that environments that need to polyfill have a chance to do so\\n  if (!getRandomValues) {\\n    // getRandomValues needs to be invoked in a context where \\\"this\\\" is a Crypto implementation.\\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\\n\\n    if (!getRandomValues) {\\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\\n    }\\n  }\\n\\n  return getRandomValues(rnds8);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"rng\",\"getRandomValues\",\"crypto\",\"bind\",\"Error\",\"rnds8\",\"Uint8Array\"]\n}\n"]