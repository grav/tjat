["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@instantdb/core/dist/index.js"],"~:js","shadow$provide.module$node_modules$$instantdb$core$dist$index = function(global, require, module, exports) {\n  function init(config, Storage, NetworkListener, versions) {\n    const existingClient = globalInstantCoreStore[config.appId];\n    if (existingClient) {\n      return existingClient;\n    }\n    Storage = new Reactor_1.default(Object.assign(Object.assign(Object.assign({}, defaultConfig), config), {cardinalityInference:config.schema ? !0 : !1}), Storage || IndexedDBStorage_1.default, NetworkListener || WindowNetworkListener_1.default, Object.assign(Object.assign({}, versions || {}), {\"@instantdb/core\":version_1.default}));\n    Storage = new InstantCoreDatabase(Storage);\n    globalInstantCoreStore[config.appId] = Storage;\n    NetworkListener = config.appId;\n    config = config.devtool;\n    \"undefined\" === typeof window || \"undefined\" === typeof window.location || \"boolean\" === typeof config && !config || (config = Object.assign({position:\"bottom-right\", allowedHosts:[\"localhost\"]}, \"object\" === typeof config ? config : {}), config.allowedHosts.includes(window.location.hostname) && (0,devtool_1.createDevtool)(NetworkListener, config));\n    return Storage;\n  }\n  global = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\"default\":mod};\n  };\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.version = exports.Storage = exports.Auth = exports.InstantCoreDatabase = exports.WindowNetworkListener = exports.IndexedDBStorage = exports.weakHash = exports.getOps = exports.i = exports.lookup = exports.txInit = exports.tx = exports.id = exports.init_experimental = void 0;\n  exports.init = init;\n  exports.coerceQuery = function(o) {\n    return JSON.parse(JSON.stringify(o));\n  };\n  const Reactor_1 = global(require(\"module$node_modules$$instantdb$core$dist$Reactor\")), instatx_1 = require(\"module$node_modules$$instantdb$core$dist$instatx\");\n  Object.defineProperty(exports, \"tx\", {enumerable:!0, get:function() {\n    return instatx_1.tx;\n  }});\n  Object.defineProperty(exports, \"txInit\", {enumerable:!0, get:function() {\n    return instatx_1.txInit;\n  }});\n  Object.defineProperty(exports, \"lookup\", {enumerable:!0, get:function() {\n    return instatx_1.lookup;\n  }});\n  Object.defineProperty(exports, \"getOps\", {enumerable:!0, get:function() {\n    return instatx_1.getOps;\n  }});\n  module = global(require(\"module$node_modules$$instantdb$core$dist$utils$weakHash\"));\n  exports.weakHash = module.default;\n  module = global(require(\"module$node_modules$$instantdb$core$dist$utils$uuid\"));\n  exports.id = module.default;\n  const IndexedDBStorage_1 = global(require(\"module$node_modules$$instantdb$core$dist$IndexedDBStorage\"));\n  exports.IndexedDBStorage = IndexedDBStorage_1.default;\n  const WindowNetworkListener_1 = global(require(\"module$node_modules$$instantdb$core$dist$WindowNetworkListener\"));\n  exports.WindowNetworkListener = WindowNetworkListener_1.default;\n  const schema_1 = require(\"module$node_modules$$instantdb$core$dist$schema\");\n  Object.defineProperty(exports, \"i\", {enumerable:!0, get:function() {\n    return schema_1.i;\n  }});\n  const devtool_1 = require(\"module$node_modules$$instantdb$core$dist$devtool\"), version_1 = global(require(\"module$node_modules$$instantdb$core$dist$version\"));\n  exports.version = version_1.default;\n  const defaultConfig = {apiURI:\"https://api.instantdb.com\", websocketURI:\"wss://api.instantdb.com/runtime/session\"}, globalInstantCoreStore = function() {\n    var _a;\n    globalThis.__instantDbStore = null !== (_a = globalThis.__instantDbStore) && void 0 !== _a ? _a : {};\n    return globalThis.__instantDbStore;\n  }();\n  class Auth {\n    constructor(db) {\n      this.db = db;\n      this.sendMagicCode = params => this.db.sendMagicCode(params);\n      this.signInWithMagicCode = params => this.db.signInWithMagicCode(params);\n      this.signInWithToken = token => this.db.signInWithCustomToken(token);\n      this.createAuthorizationURL = params => this.db.createAuthorizationURL(params);\n      this.signInWithIdToken = params => this.db.signInWithIdToken(params);\n      this.exchangeOAuthCode = params => this.db.exchangeCodeForToken(params);\n      this.issuerURI = () => this.db.issuerURI();\n      this.signOut = () => this.db.signOut();\n    }\n  }\n  exports.Auth = Auth;\n  class Storage {\n    constructor(db) {\n      this.db = db;\n      this.uploadFile = (path, file, opts = {}) => this.db.uploadFile(path, file, opts);\n      this.delete = pathname => this.db.deleteFile(pathname);\n      this.put = this.upload = (pathname, file) => this.db.upload(pathname, file);\n      this.getDownloadUrl = pathname => this.db.getDownloadUrl(pathname);\n    }\n  }\n  exports.Storage = Storage;\n  class InstantCoreDatabase {\n    constructor(reactor) {\n      this.tx = (0,instatx_1.txInit)();\n      this._reactor = reactor;\n      this.auth = new Auth(this._reactor);\n      this.storage = new Storage(this._reactor);\n    }\n    transact(chunks) {\n      return this._reactor.pushTx(chunks);\n    }\n    getLocalId(name) {\n      return this._reactor.getLocalId(name);\n    }\n    subscribeQuery(query, cb) {\n      return this._reactor.subscribeQuery(query, cb);\n    }\n    subscribeAuth(cb) {\n      return this._reactor.subscribeAuth(cb);\n    }\n    getAuth() {\n      return this._reactor.getAuth();\n    }\n    subscribeConnectionStatus(cb) {\n      return this._reactor.subscribeConnectionStatus(cb);\n    }\n    joinRoom(roomType = \"_defaultRoomType\", roomId = \"_defaultRoomId\") {\n      return {leaveRoom:this._reactor.joinRoom(roomId), subscribeTopic:(topic, onEvent) => this._reactor.subscribeTopic(roomId, topic, onEvent), subscribePresence:(opts, onChange) => this._reactor.subscribePresence(roomType, roomId, opts, onChange), publishTopic:(topic, data) => this._reactor.publishTopic({roomType, roomId, topic, data}), publishPresence:data => this._reactor.publishPresence(roomType, roomId, data), getPresence:opts => this._reactor.getPresence(roomType, roomId, opts)};\n    }\n    shutdown() {\n      delete globalInstantCoreStore[this._reactor.config.appId];\n      this._reactor.shutdown();\n    }\n    queryOnce(query) {\n      return this._reactor.queryOnce(query);\n    }\n  }\n  exports.InstantCoreDatabase = InstantCoreDatabase;\n  exports.init_experimental = init;\n};\n","~:source","shadow$provide[\"module$node_modules$$instantdb$core$dist$index\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = exports.Storage = exports.Auth = exports.InstantCoreDatabase = exports.WindowNetworkListener = exports.IndexedDBStorage = exports.weakHash = exports.getOps = exports.i = exports.lookup = exports.txInit = exports.tx = exports.id = exports.init_experimental = void 0;\nexports.init = init;\nexports.coerceQuery = coerceQuery;\nconst Reactor_1 = __importDefault(require(\"./Reactor\"));\nconst instatx_1 = require(\"./instatx\");\nObject.defineProperty(exports, \"tx\", { enumerable: true, get: function () { return instatx_1.tx; } });\nObject.defineProperty(exports, \"txInit\", { enumerable: true, get: function () { return instatx_1.txInit; } });\nObject.defineProperty(exports, \"lookup\", { enumerable: true, get: function () { return instatx_1.lookup; } });\nObject.defineProperty(exports, \"getOps\", { enumerable: true, get: function () { return instatx_1.getOps; } });\nconst weakHash_1 = __importDefault(require(\"./utils/weakHash\"));\nexports.weakHash = weakHash_1.default;\nconst uuid_1 = __importDefault(require(\"./utils/uuid\"));\nexports.id = uuid_1.default;\nconst IndexedDBStorage_1 = __importDefault(require(\"./IndexedDBStorage\"));\nexports.IndexedDBStorage = IndexedDBStorage_1.default;\nconst WindowNetworkListener_1 = __importDefault(require(\"./WindowNetworkListener\"));\nexports.WindowNetworkListener = WindowNetworkListener_1.default;\nconst schema_1 = require(\"./schema\");\nObject.defineProperty(exports, \"i\", { enumerable: true, get: function () { return schema_1.i; } });\nconst devtool_1 = require(\"./devtool\");\nconst version_1 = __importDefault(require(\"./version\"));\nexports.version = version_1.default;\nconst defaultOpenDevtool = true;\n// consts\nconst defaultConfig = {\n    apiURI: 'https://api.instantdb.com',\n    websocketURI: 'wss://api.instantdb.com/runtime/session',\n};\n// hmr\nfunction initGlobalInstantCoreStore() {\n    var _a;\n    globalThis.__instantDbStore = (_a = globalThis.__instantDbStore) !== null && _a !== void 0 ? _a : {};\n    return globalThis.__instantDbStore;\n}\nconst globalInstantCoreStore = initGlobalInstantCoreStore();\n/**\n * Functions to log users in and out.\n *\n * @see https://instantdb.com/docs/auth\n */\nclass Auth {\n    constructor(db) {\n        this.db = db;\n        /**\n         * Sends a magic code to the user's email address.\n         *\n         * Once you send the magic code, see {@link auth.signInWithMagicCode} to let the\n         * user verify.\n         *\n         * @see https://instantdb.com/docs/auth\n         * @example\n         *  db.auth.sendMagicCode({email: \"example@gmail.com\"})\n         *    .catch((err) => console.error(err.body?.message))\n         */\n        this.sendMagicCode = (params) => {\n            return this.db.sendMagicCode(params);\n        };\n        /**\n         * Verify a magic code that was sent to the user's email address.\n         *\n         * @see https://instantdb.com/docs/auth\n         *\n         * @example\n         *  db.auth.signInWithMagicCode({email: \"example@gmail.com\", code: \"123456\"})\n         *       .catch((err) => console.error(err.body?.message))\n         */\n        this.signInWithMagicCode = (params) => {\n            return this.db.signInWithMagicCode(params);\n        };\n        /**\n         * Sign in a user with a refresh token\n         *\n         * @see https://instantdb.com/docs/backend#frontend-auth-sign-in-with-token\n         *\n         * @example\n         *   // Get the token from your backend\n         *   const token = await fetch('/signin', ...);\n         *   //Sign in\n         *   db.auth.signInWithToken(token);\n         */\n        this.signInWithToken = (token) => {\n            return this.db.signInWithCustomToken(token);\n        };\n        /**\n         * Create an authorization url to sign in with an external provider\n         *\n         * @see https://instantdb.com/docs/auth\n         *\n         * @example\n         *   // Get the authorization url from your backend\n         *   const url = db.auth.createAuthorizationUrl({\n         *     clientName: \"google\",\n         *     redirectURL: window.location.href,\n         *   });\n         *\n         *   // Put it in a sign in link\n         *   <a href={url}>Log in with Google</a>\n         */\n        this.createAuthorizationURL = (params) => {\n            return this.db.createAuthorizationURL(params);\n        };\n        /**\n         * Sign in with the id_token from an external provider like Google\n         *\n         * @see https://instantdb.com/docs/auth\n         * @example\n         *   db.auth\n         *  .signInWithIdToken({\n         *    // Token from external service\n         *    idToken: id_token,\n         *    // The name you gave the client when you registered it with Instant\n         *    clientName: \"google\",\n         *    // The nonce, if any, that you used when you initiated the auth flow\n         *    // with the external service.\n         *    nonce: your_nonce\n         *  })\n         *  .catch((err) => console.error(err.body?.message));\n         *\n         */\n        this.signInWithIdToken = (params) => {\n            return this.db.signInWithIdToken(params);\n        };\n        /**\n         * Sign in with the id_token from an external provider like Google\n         *\n         * @see https://instantdb.com/docs/auth\n         * @example\n         *   db.auth\n         *  .exchangeOAuthCode({\n         *    // code received in redirect from OAuth callback\n         *    code: code\n         *    // The PKCE code_verifier, if any, that you used when you\n         *    // initiated the auth flow\n         *    codeVerifier: your_code_verifier\n         *  })\n         *  .catch((err) => console.error(err.body?.message));\n         *\n         */\n        this.exchangeOAuthCode = (params) => {\n            return this.db.exchangeCodeForToken(params);\n        };\n        /**\n         * OpenID Discovery path for use with tools like\n         * expo-auth-session that use auto-discovery of\n         * OAuth parameters.\n         *\n         * @see https://instantdb.com/docs/auth\n         * @example\n         *   const discovery = useAutoDiscovery(\n         *     db.auth.issuerURI()\n         *   );\n         */\n        this.issuerURI = () => {\n            return this.db.issuerURI();\n        };\n        /**\n         * Sign out the current user\n         */\n        this.signOut = () => {\n            return this.db.signOut();\n        };\n    }\n}\nexports.Auth = Auth;\n/**\n * Functions to manage file storage.\n */\nclass Storage {\n    constructor(db) {\n        this.db = db;\n        /**\n         * Uploads file at the provided path.\n         *\n         * @see https://instantdb.com/docs/storage\n         * @example\n         *   const [file] = e.target.files; // result of file input\n         *   const data = await db.storage.uploadFile('photos/demo.png', file);\n         */\n        this.uploadFile = (path, file, opts = {}) => {\n            return this.db.uploadFile(path, file, opts);\n        };\n        /**\n         * Deletes a file by path name.\n         *\n         * @see https://instantdb.com/docs/storage\n         * @example\n         *   await db.storage.delete('photos/demo.png');\n         */\n        this.delete = (pathname) => {\n            return this.db.deleteFile(pathname);\n        };\n        // Deprecated Storage API (Jan 2025)\n        // ---------------------------------\n        /**\n         * @deprecated. Use `db.storage.uploadFile` instead\n         * remove in the future.\n         */\n        this.upload = (pathname, file) => {\n            return this.db.upload(pathname, file);\n        };\n        /**\n         * @deprecated Use `db.storage.uploadFile` instead\n         */\n        this.put = this.upload;\n        /**\n         * @deprecated. getDownloadUrl will be removed in the future.\n         * Use `useQuery` instead to query and fetch for valid urls\n         *\n         * db.useQuery({\n         *   $files: {\n         *     $: {\n         *       where: {\n         *         path: \"moop.png\"\n         *       }\n         *     }\n         *   }\n         * })\n         */\n        this.getDownloadUrl = (pathname) => {\n            return this.db.getDownloadUrl(pathname);\n        };\n    }\n}\nexports.Storage = Storage;\n// util\nfunction coerceQuery(o) {\n    // stringify and parse to remove undefined values\n    return JSON.parse(JSON.stringify(o));\n}\nclass InstantCoreDatabase {\n    constructor(reactor) {\n        this.tx = (0, instatx_1.txInit)();\n        this._reactor = reactor;\n        this.auth = new Auth(this._reactor);\n        this.storage = new Storage(this._reactor);\n    }\n    /**\n     * Use this to write data! You can create, update, delete, and link objects\n     *\n     * @see https://instantdb.com/docs/instaml\n     *\n     * @example\n     *   // Create a new object in the `goals` namespace\n     *   const goalId = id();\n     *   db.transact(db.tx.goals[goalId].update({title: \"Get fit\"}))\n     *\n     *   // Update the title\n     *   db.transact(db.tx.goals[goalId].update({title: \"Get super fit\"}))\n     *\n     *   // Delete it\n     *   db.transact(db.tx.goals[goalId].delete())\n     *\n     *   // Or create an association:\n     *   todoId = id();\n     *   db.transact([\n     *    db.tx.todos[todoId].update({ title: 'Go on a run' }),\n     *    db.tx.goals[goalId].link({todos: todoId}),\n     *  ])\n     */\n    transact(chunks) {\n        return this._reactor.pushTx(chunks);\n    }\n    getLocalId(name) {\n        return this._reactor.getLocalId(name);\n    }\n    /**\n     * Use this to query your data!\n     *\n     * @see https://instantdb.com/docs/instaql\n     *\n     * @example\n     *  // listen to all goals\n     *  db.subscribeQuery({ goals: {} }, (resp) => {\n     *    console.log(resp.data.goals)\n     *  })\n     *\n     *  // goals where the title is \"Get Fit\"\n     *  db.subscribeQuery(\n     *    { goals: { $: { where: { title: \"Get Fit\" } } } },\n     *    (resp) => {\n     *      console.log(resp.data.goals)\n     *    }\n     *  )\n     *\n     *  // all goals, _alongside_ their todos\n     *  db.subscribeQuery({ goals: { todos: {} } }, (resp) => {\n     *    console.log(resp.data.goals)\n     *  });\n     */\n    subscribeQuery(query, cb) {\n        return this._reactor.subscribeQuery(query, cb);\n    }\n    /**\n     * Listen for the logged in state. This is useful\n     * for deciding when to show a login screen.\n     *\n     * @see https://instantdb.com/docs/auth\n     * @example\n     *   const unsub = db.subscribeAuth((auth) => {\n     *     if (auth.user) {\n     *     console.log('logged in as', auth.user.email)\n     *    } else {\n     *      console.log('logged out')\n     *    }\n     *  })\n     */\n    subscribeAuth(cb) {\n        return this._reactor.subscribeAuth(cb);\n    }\n    /**\n     * One time query for the logged in state. This is useful\n     * for scenarios where you want to know the current auth\n     * state without subscribing to changes.\n     *\n     * @see https://instantdb.com/docs/auth\n     * @example\n     *   const user = await db.getAuth();\n     *   console.log('logged in as', user.email)\n     */\n    getAuth() {\n        return this._reactor.getAuth();\n    }\n    /**\n     * Listen for connection status changes to Instant. This is useful\n     * for building things like connectivity indicators\n     *\n     * @see https://www.instantdb.com/docs/patterns#connection-status\n     * @example\n     *   const unsub = db.subscribeConnectionStatus((status) => {\n     *     const connectionState =\n     *       status === 'connecting' || status === 'opened'\n     *         ? 'authenticating'\n     *       : status === 'authenticated'\n     *         ? 'connected'\n     *       : status === 'closed'\n     *         ? 'closed'\n     *       : status === 'errored'\n     *         ? 'errored'\n     *       : 'unexpected state';\n     *\n     *     console.log('Connection status:', connectionState);\n     *   });\n     */\n    subscribeConnectionStatus(cb) {\n        return this._reactor.subscribeConnectionStatus(cb);\n    }\n    /**\n     * Join a room to publish and subscribe to topics and presence.\n     *\n     * @see https://instantdb.com/docs/presence-and-topics\n     * @example\n     * // init\n     * const db = init();\n     * const room = db.joinRoom(roomType, roomId);\n     * // usage\n     * const unsubscribeTopic = room.subscribeTopic(\"foo\", console.log);\n     * const unsubscribePresence = room.subscribePresence({}, console.log);\n     * room.publishTopic(\"hello\", { message: \"hello world!\" });\n     * room.publishPresence({ name: \"joe\" });\n     * // later\n     * unsubscribePresence();\n     * unsubscribeTopic();\n     * room.leaveRoom();\n     */\n    joinRoom(roomType = '_defaultRoomType', roomId = '_defaultRoomId') {\n        const leaveRoom = this._reactor.joinRoom(roomId);\n        return {\n            leaveRoom,\n            subscribeTopic: (topic, onEvent) => this._reactor.subscribeTopic(roomId, topic, onEvent),\n            subscribePresence: (opts, onChange) => this._reactor.subscribePresence(roomType, roomId, opts, onChange),\n            publishTopic: (topic, data) => this._reactor.publishTopic({ roomType, roomId, topic, data }),\n            publishPresence: (data) => this._reactor.publishPresence(roomType, roomId, data),\n            getPresence: (opts) => this._reactor.getPresence(roomType, roomId, opts),\n        };\n    }\n    shutdown() {\n        delete globalInstantCoreStore[this._reactor.config.appId];\n        this._reactor.shutdown();\n    }\n    /**\n     * Use this for one-off queries.\n     * Returns local data if available, otherwise fetches from the server.\n     * Because we want to avoid stale data, this method will throw an error\n     * if the user is offline or there is no active connection to the server.\n     *\n     * @see https://instantdb.com/docs/instaql\n     *\n     * @example\n     *\n     *  const resp = await db.queryOnce({ goals: {} });\n     *  console.log(resp.data.goals)\n     */\n    queryOnce(query) {\n        return this._reactor.queryOnce(query);\n    }\n}\nexports.InstantCoreDatabase = InstantCoreDatabase;\n/**\n *\n * The first step: init your application!\n *\n * Visit https://instantdb.com/dash to get your `appId` :)\n *\n * @example\n *  import { init } from \"@instantdb/core\"\n *\n *  const db = init({ appId: \"my-app-id\" })\n *\n *  // You can also provide a schema for type safety and editor autocomplete!\n *\n *  import { init } from \"@instantdb/core\"\n *  import schema from \"\"../instant.schema.ts\";\n *\n *  const db = init({ appId: \"my-app-id\", schema })\n *\n *  // To learn more: https://instantdb.com/docs/modeling-data\n */\nfunction init(config, Storage, NetworkListener, versions) {\n    const existingClient = globalInstantCoreStore[config.appId];\n    if (existingClient) {\n        return existingClient;\n    }\n    const reactor = new Reactor_1.default(Object.assign(Object.assign(Object.assign({}, defaultConfig), config), { cardinalityInference: config.schema ? true : false }), Storage || IndexedDBStorage_1.default, NetworkListener || WindowNetworkListener_1.default, Object.assign(Object.assign({}, (versions || {})), { '@instantdb/core': version_1.default }));\n    const client = new InstantCoreDatabase(reactor);\n    globalInstantCoreStore[config.appId] = client;\n    handleDevtool(config.appId, config.devtool);\n    return client;\n}\nfunction handleDevtool(appId, devtool) {\n    if (typeof window === 'undefined' || typeof window.location === 'undefined') {\n        return;\n    }\n    if (typeof devtool === 'boolean' && !devtool) {\n        return;\n    }\n    const config = Object.assign({ position: 'bottom-right', allowedHosts: ['localhost'] }, (typeof devtool === 'object' ? devtool : {}));\n    if (!config.allowedHosts.includes(window.location.hostname)) {\n        return;\n    }\n    (0, devtool_1.createDevtool)(appId, config);\n}\n/**\n * @deprecated\n * `init_experimental` is deprecated. You can replace it with `init`.\n *\n * @example\n *\n * // Before\n * import { init_experimental } from \"@instantdb/core\"\n * const db = init_experimental({  ...  });\n *\n * // After\n * import { init } from \"@instantdb/core\"\n * const db = init({ ...  });\n */\nconst init_experimental = init;\nexports.init_experimental = init_experimental;\n//# sourceMappingURL=index.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$instantdb$core$dist$instatx","~$module$node_modules$$instantdb$core$dist$schema","~$shadow.js","~$module$node_modules$$instantdb$core$dist$version","~$module$node_modules$$instantdb$core$dist$utils$uuid","~$module$node_modules$$instantdb$core$dist$utils$weakHash","~$module$node_modules$$instantdb$core$dist$WindowNetworkListener","~$module$node_modules$$instantdb$core$dist$devtool","~$module$node_modules$$instantdb$core$dist$Reactor","~$module$node_modules$$instantdb$core$dist$IndexedDBStorage"]],"~:properties",["^5",["roomType","Storage","signInWithMagicCode","issuerURI","coerceQuery","delete","put","signInWithToken","upload","__esModule","subscribeTopic","auth","storage","publishTopic","id","lookup","uploadFile","apiURI","weakHash","getOps","sendMagicCode","createAuthorizationURL","leaveRoom","signInWithIdToken","InstantCoreDatabase","getDownloadUrl","position","value","enumerable","websocketURI","cardinalityInference","exchangeOAuthCode","init_experimental","txInit","IndexedDBStorage","WindowNetworkListener","tx","i","init","version","db","publishPresence","roomId","Auth","signOut","subscribePresence","data","get","__instantDbStore","allowedHosts","_reactor","topic","getPresence"]],"~:compiled-at",1756239700001,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$instantdb$core$dist$index.js\",\n\"lineCount\":119,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@instantdb/core/dist/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$instantdb$core$dist$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nvar __importDefault = (this && this.__importDefault) || function (mod) {\\n    return (mod && mod.__esModule) ? mod : { \\\"default\\\": mod };\\n};\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.version = exports.Storage = exports.Auth = exports.InstantCoreDatabase = exports.WindowNetworkListener = exports.IndexedDBStorage = exports.weakHash = exports.getOps = exports.i = exports.lookup = exports.txInit = exports.tx = exports.id = exports.init_experimental = void 0;\\nexports.init = init;\\nexports.coerceQuery = coerceQuery;\\nconst Reactor_1 = __importDefault(require(\\\"./Reactor\\\"));\\nconst instatx_1 = require(\\\"./instatx\\\");\\nObject.defineProperty(exports, \\\"tx\\\", { enumerable: true, get: function () { return instatx_1.tx; } });\\nObject.defineProperty(exports, \\\"txInit\\\", { enumerable: true, get: function () { return instatx_1.txInit; } });\\nObject.defineProperty(exports, \\\"lookup\\\", { enumerable: true, get: function () { return instatx_1.lookup; } });\\nObject.defineProperty(exports, \\\"getOps\\\", { enumerable: true, get: function () { return instatx_1.getOps; } });\\nconst weakHash_1 = __importDefault(require(\\\"./utils/weakHash\\\"));\\nexports.weakHash = weakHash_1.default;\\nconst uuid_1 = __importDefault(require(\\\"./utils/uuid\\\"));\\nexports.id = uuid_1.default;\\nconst IndexedDBStorage_1 = __importDefault(require(\\\"./IndexedDBStorage\\\"));\\nexports.IndexedDBStorage = IndexedDBStorage_1.default;\\nconst WindowNetworkListener_1 = __importDefault(require(\\\"./WindowNetworkListener\\\"));\\nexports.WindowNetworkListener = WindowNetworkListener_1.default;\\nconst schema_1 = require(\\\"./schema\\\");\\nObject.defineProperty(exports, \\\"i\\\", { enumerable: true, get: function () { return schema_1.i; } });\\nconst devtool_1 = require(\\\"./devtool\\\");\\nconst version_1 = __importDefault(require(\\\"./version\\\"));\\nexports.version = version_1.default;\\nconst defaultOpenDevtool = true;\\n// consts\\nconst defaultConfig = {\\n    apiURI: 'https://api.instantdb.com',\\n    websocketURI: 'wss://api.instantdb.com/runtime/session',\\n};\\n// hmr\\nfunction initGlobalInstantCoreStore() {\\n    var _a;\\n    globalThis.__instantDbStore = (_a = globalThis.__instantDbStore) !== null && _a !== void 0 ? _a : {};\\n    return globalThis.__instantDbStore;\\n}\\nconst globalInstantCoreStore = initGlobalInstantCoreStore();\\n/**\\n * Functions to log users in and out.\\n *\\n * @see https://instantdb.com/docs/auth\\n */\\nclass Auth {\\n    constructor(db) {\\n        this.db = db;\\n        /**\\n         * Sends a magic code to the user's email address.\\n         *\\n         * Once you send the magic code, see {@link auth.signInWithMagicCode} to let the\\n         * user verify.\\n         *\\n         * @see https://instantdb.com/docs/auth\\n         * @example\\n         *  db.auth.sendMagicCode({email: \\\"example@gmail.com\\\"})\\n         *    .catch((err) => console.error(err.body?.message))\\n         */\\n        this.sendMagicCode = (params) => {\\n            return this.db.sendMagicCode(params);\\n        };\\n        /**\\n         * Verify a magic code that was sent to the user's email address.\\n         *\\n         * @see https://instantdb.com/docs/auth\\n         *\\n         * @example\\n         *  db.auth.signInWithMagicCode({email: \\\"example@gmail.com\\\", code: \\\"123456\\\"})\\n         *       .catch((err) => console.error(err.body?.message))\\n         */\\n        this.signInWithMagicCode = (params) => {\\n            return this.db.signInWithMagicCode(params);\\n        };\\n        /**\\n         * Sign in a user with a refresh token\\n         *\\n         * @see https://instantdb.com/docs/backend#frontend-auth-sign-in-with-token\\n         *\\n         * @example\\n         *   // Get the token from your backend\\n         *   const token = await fetch('/signin', ...);\\n         *   //Sign in\\n         *   db.auth.signInWithToken(token);\\n         */\\n        this.signInWithToken = (token) => {\\n            return this.db.signInWithCustomToken(token);\\n        };\\n        /**\\n         * Create an authorization url to sign in with an external provider\\n         *\\n         * @see https://instantdb.com/docs/auth\\n         *\\n         * @example\\n         *   // Get the authorization url from your backend\\n         *   const url = db.auth.createAuthorizationUrl({\\n         *     clientName: \\\"google\\\",\\n         *     redirectURL: window.location.href,\\n         *   });\\n         *\\n         *   // Put it in a sign in link\\n         *   <a href={url}>Log in with Google</a>\\n         */\\n        this.createAuthorizationURL = (params) => {\\n            return this.db.createAuthorizationURL(params);\\n        };\\n        /**\\n         * Sign in with the id_token from an external provider like Google\\n         *\\n         * @see https://instantdb.com/docs/auth\\n         * @example\\n         *   db.auth\\n         *  .signInWithIdToken({\\n         *    // Token from external service\\n         *    idToken: id_token,\\n         *    // The name you gave the client when you registered it with Instant\\n         *    clientName: \\\"google\\\",\\n         *    // The nonce, if any, that you used when you initiated the auth flow\\n         *    // with the external service.\\n         *    nonce: your_nonce\\n         *  })\\n         *  .catch((err) => console.error(err.body?.message));\\n         *\\n         */\\n        this.signInWithIdToken = (params) => {\\n            return this.db.signInWithIdToken(params);\\n        };\\n        /**\\n         * Sign in with the id_token from an external provider like Google\\n         *\\n         * @see https://instantdb.com/docs/auth\\n         * @example\\n         *   db.auth\\n         *  .exchangeOAuthCode({\\n         *    // code received in redirect from OAuth callback\\n         *    code: code\\n         *    // The PKCE code_verifier, if any, that you used when you\\n         *    // initiated the auth flow\\n         *    codeVerifier: your_code_verifier\\n         *  })\\n         *  .catch((err) => console.error(err.body?.message));\\n         *\\n         */\\n        this.exchangeOAuthCode = (params) => {\\n            return this.db.exchangeCodeForToken(params);\\n        };\\n        /**\\n         * OpenID Discovery path for use with tools like\\n         * expo-auth-session that use auto-discovery of\\n         * OAuth parameters.\\n         *\\n         * @see https://instantdb.com/docs/auth\\n         * @example\\n         *   const discovery = useAutoDiscovery(\\n         *     db.auth.issuerURI()\\n         *   );\\n         */\\n        this.issuerURI = () => {\\n            return this.db.issuerURI();\\n        };\\n        /**\\n         * Sign out the current user\\n         */\\n        this.signOut = () => {\\n            return this.db.signOut();\\n        };\\n    }\\n}\\nexports.Auth = Auth;\\n/**\\n * Functions to manage file storage.\\n */\\nclass Storage {\\n    constructor(db) {\\n        this.db = db;\\n        /**\\n         * Uploads file at the provided path.\\n         *\\n         * @see https://instantdb.com/docs/storage\\n         * @example\\n         *   const [file] = e.target.files; // result of file input\\n         *   const data = await db.storage.uploadFile('photos/demo.png', file);\\n         */\\n        this.uploadFile = (path, file, opts = {}) => {\\n            return this.db.uploadFile(path, file, opts);\\n        };\\n        /**\\n         * Deletes a file by path name.\\n         *\\n         * @see https://instantdb.com/docs/storage\\n         * @example\\n         *   await db.storage.delete('photos/demo.png');\\n         */\\n        this.delete = (pathname) => {\\n            return this.db.deleteFile(pathname);\\n        };\\n        // Deprecated Storage API (Jan 2025)\\n        // ---------------------------------\\n        /**\\n         * @deprecated. Use `db.storage.uploadFile` instead\\n         * remove in the future.\\n         */\\n        this.upload = (pathname, file) => {\\n            return this.db.upload(pathname, file);\\n        };\\n        /**\\n         * @deprecated Use `db.storage.uploadFile` instead\\n         */\\n        this.put = this.upload;\\n        /**\\n         * @deprecated. getDownloadUrl will be removed in the future.\\n         * Use `useQuery` instead to query and fetch for valid urls\\n         *\\n         * db.useQuery({\\n         *   $files: {\\n         *     $: {\\n         *       where: {\\n         *         path: \\\"moop.png\\\"\\n         *       }\\n         *     }\\n         *   }\\n         * })\\n         */\\n        this.getDownloadUrl = (pathname) => {\\n            return this.db.getDownloadUrl(pathname);\\n        };\\n    }\\n}\\nexports.Storage = Storage;\\n// util\\nfunction coerceQuery(o) {\\n    // stringify and parse to remove undefined values\\n    return JSON.parse(JSON.stringify(o));\\n}\\nclass InstantCoreDatabase {\\n    constructor(reactor) {\\n        this.tx = (0, instatx_1.txInit)();\\n        this._reactor = reactor;\\n        this.auth = new Auth(this._reactor);\\n        this.storage = new Storage(this._reactor);\\n    }\\n    /**\\n     * Use this to write data! You can create, update, delete, and link objects\\n     *\\n     * @see https://instantdb.com/docs/instaml\\n     *\\n     * @example\\n     *   // Create a new object in the `goals` namespace\\n     *   const goalId = id();\\n     *   db.transact(db.tx.goals[goalId].update({title: \\\"Get fit\\\"}))\\n     *\\n     *   // Update the title\\n     *   db.transact(db.tx.goals[goalId].update({title: \\\"Get super fit\\\"}))\\n     *\\n     *   // Delete it\\n     *   db.transact(db.tx.goals[goalId].delete())\\n     *\\n     *   // Or create an association:\\n     *   todoId = id();\\n     *   db.transact([\\n     *    db.tx.todos[todoId].update({ title: 'Go on a run' }),\\n     *    db.tx.goals[goalId].link({todos: todoId}),\\n     *  ])\\n     */\\n    transact(chunks) {\\n        return this._reactor.pushTx(chunks);\\n    }\\n    getLocalId(name) {\\n        return this._reactor.getLocalId(name);\\n    }\\n    /**\\n     * Use this to query your data!\\n     *\\n     * @see https://instantdb.com/docs/instaql\\n     *\\n     * @example\\n     *  // listen to all goals\\n     *  db.subscribeQuery({ goals: {} }, (resp) => {\\n     *    console.log(resp.data.goals)\\n     *  })\\n     *\\n     *  // goals where the title is \\\"Get Fit\\\"\\n     *  db.subscribeQuery(\\n     *    { goals: { $: { where: { title: \\\"Get Fit\\\" } } } },\\n     *    (resp) => {\\n     *      console.log(resp.data.goals)\\n     *    }\\n     *  )\\n     *\\n     *  // all goals, _alongside_ their todos\\n     *  db.subscribeQuery({ goals: { todos: {} } }, (resp) => {\\n     *    console.log(resp.data.goals)\\n     *  });\\n     */\\n    subscribeQuery(query, cb) {\\n        return this._reactor.subscribeQuery(query, cb);\\n    }\\n    /**\\n     * Listen for the logged in state. This is useful\\n     * for deciding when to show a login screen.\\n     *\\n     * @see https://instantdb.com/docs/auth\\n     * @example\\n     *   const unsub = db.subscribeAuth((auth) => {\\n     *     if (auth.user) {\\n     *     console.log('logged in as', auth.user.email)\\n     *    } else {\\n     *      console.log('logged out')\\n     *    }\\n     *  })\\n     */\\n    subscribeAuth(cb) {\\n        return this._reactor.subscribeAuth(cb);\\n    }\\n    /**\\n     * One time query for the logged in state. This is useful\\n     * for scenarios where you want to know the current auth\\n     * state without subscribing to changes.\\n     *\\n     * @see https://instantdb.com/docs/auth\\n     * @example\\n     *   const user = await db.getAuth();\\n     *   console.log('logged in as', user.email)\\n     */\\n    getAuth() {\\n        return this._reactor.getAuth();\\n    }\\n    /**\\n     * Listen for connection status changes to Instant. This is useful\\n     * for building things like connectivity indicators\\n     *\\n     * @see https://www.instantdb.com/docs/patterns#connection-status\\n     * @example\\n     *   const unsub = db.subscribeConnectionStatus((status) => {\\n     *     const connectionState =\\n     *       status === 'connecting' || status === 'opened'\\n     *         ? 'authenticating'\\n     *       : status === 'authenticated'\\n     *         ? 'connected'\\n     *       : status === 'closed'\\n     *         ? 'closed'\\n     *       : status === 'errored'\\n     *         ? 'errored'\\n     *       : 'unexpected state';\\n     *\\n     *     console.log('Connection status:', connectionState);\\n     *   });\\n     */\\n    subscribeConnectionStatus(cb) {\\n        return this._reactor.subscribeConnectionStatus(cb);\\n    }\\n    /**\\n     * Join a room to publish and subscribe to topics and presence.\\n     *\\n     * @see https://instantdb.com/docs/presence-and-topics\\n     * @example\\n     * // init\\n     * const db = init();\\n     * const room = db.joinRoom(roomType, roomId);\\n     * // usage\\n     * const unsubscribeTopic = room.subscribeTopic(\\\"foo\\\", console.log);\\n     * const unsubscribePresence = room.subscribePresence({}, console.log);\\n     * room.publishTopic(\\\"hello\\\", { message: \\\"hello world!\\\" });\\n     * room.publishPresence({ name: \\\"joe\\\" });\\n     * // later\\n     * unsubscribePresence();\\n     * unsubscribeTopic();\\n     * room.leaveRoom();\\n     */\\n    joinRoom(roomType = '_defaultRoomType', roomId = '_defaultRoomId') {\\n        const leaveRoom = this._reactor.joinRoom(roomId);\\n        return {\\n            leaveRoom,\\n            subscribeTopic: (topic, onEvent) => this._reactor.subscribeTopic(roomId, topic, onEvent),\\n            subscribePresence: (opts, onChange) => this._reactor.subscribePresence(roomType, roomId, opts, onChange),\\n            publishTopic: (topic, data) => this._reactor.publishTopic({ roomType, roomId, topic, data }),\\n            publishPresence: (data) => this._reactor.publishPresence(roomType, roomId, data),\\n            getPresence: (opts) => this._reactor.getPresence(roomType, roomId, opts),\\n        };\\n    }\\n    shutdown() {\\n        delete globalInstantCoreStore[this._reactor.config.appId];\\n        this._reactor.shutdown();\\n    }\\n    /**\\n     * Use this for one-off queries.\\n     * Returns local data if available, otherwise fetches from the server.\\n     * Because we want to avoid stale data, this method will throw an error\\n     * if the user is offline or there is no active connection to the server.\\n     *\\n     * @see https://instantdb.com/docs/instaql\\n     *\\n     * @example\\n     *\\n     *  const resp = await db.queryOnce({ goals: {} });\\n     *  console.log(resp.data.goals)\\n     */\\n    queryOnce(query) {\\n        return this._reactor.queryOnce(query);\\n    }\\n}\\nexports.InstantCoreDatabase = InstantCoreDatabase;\\n/**\\n *\\n * The first step: init your application!\\n *\\n * Visit https://instantdb.com/dash to get your `appId` :)\\n *\\n * @example\\n *  import { init } from \\\"@instantdb/core\\\"\\n *\\n *  const db = init({ appId: \\\"my-app-id\\\" })\\n *\\n *  // You can also provide a schema for type safety and editor autocomplete!\\n *\\n *  import { init } from \\\"@instantdb/core\\\"\\n *  import schema from \\\"\\\"../instant.schema.ts\\\";\\n *\\n *  const db = init({ appId: \\\"my-app-id\\\", schema })\\n *\\n *  // To learn more: https://instantdb.com/docs/modeling-data\\n */\\nfunction init(config, Storage, NetworkListener, versions) {\\n    const existingClient = globalInstantCoreStore[config.appId];\\n    if (existingClient) {\\n        return existingClient;\\n    }\\n    const reactor = new Reactor_1.default(Object.assign(Object.assign(Object.assign({}, defaultConfig), config), { cardinalityInference: config.schema ? true : false }), Storage || IndexedDBStorage_1.default, NetworkListener || WindowNetworkListener_1.default, Object.assign(Object.assign({}, (versions || {})), { '@instantdb/core': version_1.default }));\\n    const client = new InstantCoreDatabase(reactor);\\n    globalInstantCoreStore[config.appId] = client;\\n    handleDevtool(config.appId, config.devtool);\\n    return client;\\n}\\nfunction handleDevtool(appId, devtool) {\\n    if (typeof window === 'undefined' || typeof window.location === 'undefined') {\\n        return;\\n    }\\n    if (typeof devtool === 'boolean' && !devtool) {\\n        return;\\n    }\\n    const config = Object.assign({ position: 'bottom-right', allowedHosts: ['localhost'] }, (typeof devtool === 'object' ? devtool : {}));\\n    if (!config.allowedHosts.includes(window.location.hostname)) {\\n        return;\\n    }\\n    (0, devtool_1.createDevtool)(appId, config);\\n}\\n/**\\n * @deprecated\\n * `init_experimental` is deprecated. You can replace it with `init`.\\n *\\n * @example\\n *\\n * // Before\\n * import { init_experimental } from \\\"@instantdb/core\\\"\\n * const db = init_experimental({  ...  });\\n *\\n * // After\\n * import { init } from \\\"@instantdb/core\\\"\\n * const db = init({ ...  });\\n */\\nconst init_experimental = init;\\nexports.init_experimental = init_experimental;\\n//# sourceMappingURL=index.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"init\",\"config\",\"Storage\",\"NetworkListener\",\"versions\",\"existingClient\",\"globalInstantCoreStore\",\"appId\",\"reactor\",\"Reactor_1\",\"default\",\"Object\",\"assign\",\"defaultConfig\",\"cardinalityInference\",\"schema\",\"IndexedDBStorage_1\",\"WindowNetworkListener_1\",\"version_1\",\"client\",\"InstantCoreDatabase\",\"devtool\",\"window\",\"location\",\"position\",\"allowedHosts\",\"includes\",\"hostname\",\"devtool_1\",\"createDevtool\",\"__importDefault\",\"mod\",\"__esModule\",\"defineProperty\",\"value\",\"version\",\"Auth\",\"WindowNetworkListener\",\"IndexedDBStorage\",\"weakHash\",\"getOps\",\"i\",\"lookup\",\"txInit\",\"tx\",\"id\",\"init_experimental\",\"coerceQuery\",\"o\",\"JSON\",\"parse\",\"stringify\",\"instatx_1\",\"enumerable\",\"get\",\"weakHash_1\",\"uuid_1\",\"schema_1\",\"apiURI\",\"websocketURI\",\"initGlobalInstantCoreStore\",\"_a\",\"globalThis\",\"__instantDbStore\",\"constructor\",\"db\",\"sendMagicCode\",\"params\",\"this.sendMagicCode\",\"signInWithMagicCode\",\"this.signInWithMagicCode\",\"signInWithToken\",\"token\",\"this.signInWithToken\",\"signInWithCustomToken\",\"createAuthorizationURL\",\"this.createAuthorizationURL\",\"signInWithIdToken\",\"this.signInWithIdToken\",\"exchangeOAuthCode\",\"this.exchangeOAuthCode\",\"exchangeCodeForToken\",\"issuerURI\",\"this.issuerURI\",\"signOut\",\"this.signOut\",\"uploadFile\",\"path\",\"file\",\"opts\",\"this.uploadFile\",\"delete\",\"pathname\",\"this.delete\",\"deleteFile\",\"put\",\"upload\",\"this.upload\",\"getDownloadUrl\",\"this.getDownloadUrl\",\"_reactor\",\"auth\",\"storage\",\"transact\",\"chunks\",\"pushTx\",\"getLocalId\",\"name\",\"subscribeQuery\",\"query\",\"cb\",\"subscribeAuth\",\"getAuth\",\"subscribeConnectionStatus\",\"joinRoom\",\"roomType\",\"roomId\",\"leaveRoom\",\"subscribeTopic\",\"topic\",\"onEvent\",\"subscribePresence\",\"onChange\",\"publishTopic\",\"data\",\"publishPresence\",\"getPresence\",\"shutdown\",\"queryOnce\"]\n}\n"]