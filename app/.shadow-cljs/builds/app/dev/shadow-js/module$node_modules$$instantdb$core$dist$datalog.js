["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@instantdb/core/dist/datalog.js"],"~:js","shadow$provide.module$node_modules$$instantdb$core$dist$datalog = function(global, require, module, exports) {\n  function matchVariable(variable, triplePart, context) {\n    return context.hasOwnProperty(variable) ? matchPart(context[variable], triplePart, context) : Object.assign(Object.assign({}, context), {[variable]:triplePart});\n  }\n  function matchExact(patternPart, triplePart, context) {\n    return patternPart === triplePart ? context : null;\n  }\n  function matchPart(patternPart, triplePart, context) {\n    if (!context) {\n      return null;\n    }\n    if (\"object\" === typeof patternPart) {\n      a: {\n        for (var prop of validArgMapProps) {\n          if (patternPart.hasOwnProperty(prop)) {\n            patternPart = !0;\n            break a;\n          }\n        }\n        patternPart = !1;\n      }\n      return patternPart ? context : null;\n    }\n    a: {\n      switch(typeof patternPart) {\n        case \"string\":\n          prop = patternPart.startsWith(\"?\") ? matchVariable : matchExact;\n          break a;\n        default:\n          prop = matchExact;\n      }\n    }\n    return prop(patternPart, triplePart, context);\n  }\n  function matchPattern(pattern, triple, context) {\n    return pattern.reduce((context, patternPart, idx) => matchPart(patternPart, triple[idx], context), context);\n  }\n  function querySingle(store, pattern, context) {\n    return (0,store_js_1.getTriples)(store, actualize(context, pattern)).map(triple => matchPattern(pattern, triple, context)).filter(x => x);\n  }\n  function queryPattern(store, pattern, contexts) {\n    return pattern.or ? pattern.or.patterns.flatMap(patterns => queryWhere(store, patterns, contexts)) : pattern.and ? pattern.and.patterns.reduce((contexts, patterns) => queryWhere(store, patterns, contexts), contexts) : contexts.flatMap(context => querySingle(store, pattern, context));\n  }\n  function queryWhere(store, patterns, contexts = [{}]) {\n    return patterns.reduce((contexts, pattern) => queryPattern(store, pattern, contexts), contexts);\n  }\n  function actualize(context, find) {\n    return Array.isArray(find) ? find.map(findPart => actualize(context, findPart)) : \"string\" === typeof find && find.startsWith(\"?\") ? context[find] : find;\n  }\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.matchPattern = matchPattern;\n  exports.querySingle = querySingle;\n  exports.queryWhere = queryWhere;\n  exports.query = function(store, {find, where}) {\n    return queryWhere(store, where).map(context => actualize(context, find));\n  };\n  const store_js_1 = require(\"module$node_modules$$instantdb$core$dist$store\"), validArgMapProps = [\"in\", \"$in\", \"$not\", \"$isNull\", \"$comparator\"];\n};\n","~:source","shadow$provide[\"module$node_modules$$instantdb$core$dist$datalog\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.matchPattern = matchPattern;\nexports.querySingle = querySingle;\nexports.queryWhere = queryWhere;\nexports.query = query;\n// 1. patternMatch\nconst store_js_1 = require(\"./store.js\");\nfunction isVariable(x) {\n    return typeof x === 'string' && x.startsWith('?');\n}\nfunction matchVariable(variable, triplePart, context) {\n    if (context.hasOwnProperty(variable)) {\n        const bound = context[variable];\n        return matchPart(bound, triplePart, context);\n    }\n    return Object.assign(Object.assign({}, context), { [variable]: triplePart });\n}\nfunction matchExact(patternPart, triplePart, context) {\n    return patternPart === triplePart ? context : null;\n}\nfunction matcherForPatternPart(patternPart) {\n    switch (typeof patternPart) {\n        case 'string':\n            return patternPart.startsWith('?') ? matchVariable : matchExact;\n        default:\n            return matchExact;\n    }\n}\nconst validArgMapProps = [\n    'in',\n    '$in',\n    '$not',\n    '$isNull',\n    '$comparator', // covers all of $gt, $lt, etc.\n];\n// Checks if an object is an args map\nfunction isArgsMap(patternPart) {\n    for (const prop of validArgMapProps) {\n        if (patternPart.hasOwnProperty(prop)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction matchPart(patternPart, triplePart, context) {\n    if (!context)\n        return null;\n    if (typeof patternPart === 'object') {\n        // This is an args map, so we'll have already fitered the triples\n        // in `getRelevantTriples`\n        if (isArgsMap(patternPart)) {\n            return context;\n        }\n        return null;\n    }\n    const matcher = matcherForPatternPart(patternPart);\n    return matcher(patternPart, triplePart, context);\n}\nfunction matchPattern(pattern, triple, context) {\n    return pattern.reduce((context, patternPart, idx) => {\n        const triplePart = triple[idx];\n        return matchPart(patternPart, triplePart, context);\n    }, context);\n}\n// 2. querySingle\nfunction querySingle(store, pattern, context) {\n    return relevantTriples(store, pattern, context)\n        .map((triple) => matchPattern(pattern, triple, context))\n        .filter((x) => x);\n}\n// 3. queryWhere\nfunction queryPattern(store, pattern, contexts) {\n    if (pattern.or) {\n        return pattern.or.patterns.flatMap((patterns) => {\n            return queryWhere(store, patterns, contexts);\n        });\n    }\n    if (pattern.and) {\n        return pattern.and.patterns.reduce((contexts, patterns) => {\n            return queryWhere(store, patterns, contexts);\n        }, contexts);\n    }\n    return contexts.flatMap((context) => querySingle(store, pattern, context));\n}\nfunction queryWhere(store, patterns, contexts = [{}]) {\n    return patterns.reduce((contexts, pattern) => {\n        return queryPattern(store, pattern, contexts);\n    }, contexts);\n}\n// 4. query\nfunction actualize(context, find) {\n    if (Array.isArray(find)) {\n        return find.map((findPart) => actualize(context, findPart));\n    }\n    return isVariable(find) ? context[find] : find;\n}\nfunction query(store, { find, where }) {\n    const contexts = queryWhere(store, where);\n    return contexts.map((context) => actualize(context, find));\n}\n// 5. Index\nfunction relevantTriples(store, pattern, context) {\n    return (0, store_js_1.getTriples)(store, actualize(context, pattern));\n}\n//# sourceMappingURL=datalog.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$instantdb$core$dist$store","~$shadow.js"]],"~:properties",["^5",["matchPattern","query","__esModule","value","queryWhere","querySingle"]],"~:compiled-at",1756239699946,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$instantdb$core$dist$datalog.js\",\n\"lineCount\":59,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@instantdb/core/dist/datalog.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$instantdb$core$dist$datalog\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.matchPattern = matchPattern;\\nexports.querySingle = querySingle;\\nexports.queryWhere = queryWhere;\\nexports.query = query;\\n// 1. patternMatch\\nconst store_js_1 = require(\\\"./store.js\\\");\\nfunction isVariable(x) {\\n    return typeof x === 'string' && x.startsWith('?');\\n}\\nfunction matchVariable(variable, triplePart, context) {\\n    if (context.hasOwnProperty(variable)) {\\n        const bound = context[variable];\\n        return matchPart(bound, triplePart, context);\\n    }\\n    return Object.assign(Object.assign({}, context), { [variable]: triplePart });\\n}\\nfunction matchExact(patternPart, triplePart, context) {\\n    return patternPart === triplePart ? context : null;\\n}\\nfunction matcherForPatternPart(patternPart) {\\n    switch (typeof patternPart) {\\n        case 'string':\\n            return patternPart.startsWith('?') ? matchVariable : matchExact;\\n        default:\\n            return matchExact;\\n    }\\n}\\nconst validArgMapProps = [\\n    'in',\\n    '$in',\\n    '$not',\\n    '$isNull',\\n    '$comparator', // covers all of $gt, $lt, etc.\\n];\\n// Checks if an object is an args map\\nfunction isArgsMap(patternPart) {\\n    for (const prop of validArgMapProps) {\\n        if (patternPart.hasOwnProperty(prop)) {\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\nfunction matchPart(patternPart, triplePart, context) {\\n    if (!context)\\n        return null;\\n    if (typeof patternPart === 'object') {\\n        // This is an args map, so we'll have already fitered the triples\\n        // in `getRelevantTriples`\\n        if (isArgsMap(patternPart)) {\\n            return context;\\n        }\\n        return null;\\n    }\\n    const matcher = matcherForPatternPart(patternPart);\\n    return matcher(patternPart, triplePart, context);\\n}\\nfunction matchPattern(pattern, triple, context) {\\n    return pattern.reduce((context, patternPart, idx) => {\\n        const triplePart = triple[idx];\\n        return matchPart(patternPart, triplePart, context);\\n    }, context);\\n}\\n// 2. querySingle\\nfunction querySingle(store, pattern, context) {\\n    return relevantTriples(store, pattern, context)\\n        .map((triple) => matchPattern(pattern, triple, context))\\n        .filter((x) => x);\\n}\\n// 3. queryWhere\\nfunction queryPattern(store, pattern, contexts) {\\n    if (pattern.or) {\\n        return pattern.or.patterns.flatMap((patterns) => {\\n            return queryWhere(store, patterns, contexts);\\n        });\\n    }\\n    if (pattern.and) {\\n        return pattern.and.patterns.reduce((contexts, patterns) => {\\n            return queryWhere(store, patterns, contexts);\\n        }, contexts);\\n    }\\n    return contexts.flatMap((context) => querySingle(store, pattern, context));\\n}\\nfunction queryWhere(store, patterns, contexts = [{}]) {\\n    return patterns.reduce((contexts, pattern) => {\\n        return queryPattern(store, pattern, contexts);\\n    }, contexts);\\n}\\n// 4. query\\nfunction actualize(context, find) {\\n    if (Array.isArray(find)) {\\n        return find.map((findPart) => actualize(context, findPart));\\n    }\\n    return isVariable(find) ? context[find] : find;\\n}\\nfunction query(store, { find, where }) {\\n    const contexts = queryWhere(store, where);\\n    return contexts.map((context) => actualize(context, find));\\n}\\n// 5. Index\\nfunction relevantTriples(store, pattern, context) {\\n    return (0, store_js_1.getTriples)(store, actualize(context, pattern));\\n}\\n//# sourceMappingURL=datalog.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"matchVariable\",\"variable\",\"triplePart\",\"context\",\"hasOwnProperty\",\"matchPart\",\"bound\",\"Object\",\"assign\",\"matchExact\",\"patternPart\",\"prop\",\"validArgMapProps\",\"startsWith\",\"matcher\",\"matchPattern\",\"pattern\",\"triple\",\"reduce\",\"idx\",\"querySingle\",\"store\",\"store_js_1\",\"getTriples\",\"actualize\",\"map\",\"filter\",\"x\",\"queryPattern\",\"contexts\",\"or\",\"patterns\",\"flatMap\",\"queryWhere\",\"and\",\"find\",\"Array\",\"isArray\",\"findPart\",\"defineProperty\",\"value\",\"query\",\"where\"]\n}\n"]