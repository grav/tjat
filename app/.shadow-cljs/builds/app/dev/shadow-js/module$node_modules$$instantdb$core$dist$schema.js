["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@instantdb/core/dist/schema.js"],"~:js","shadow$provide.module$node_modules$$instantdb$core$dist$schema = function(global, require, module, exports) {\n  function enrichEntitiesWithLinks(entities, links) {\n    var _a, _b, _c, _d, JSCompiler_object_inline_fwd_408 = {}, JSCompiler_object_inline_rev_409 = {};\n    for (const linkDef of Object.values(links)) {\n      (_a = JSCompiler_object_inline_fwd_408)[_b = linkDef.forward.on] || (_a[_b] = {}), (_c = JSCompiler_object_inline_rev_409)[_d = linkDef.reverse.on] || (_c[_d] = {}), JSCompiler_object_inline_fwd_408[linkDef.forward.on][linkDef.forward.label] = {entityName:linkDef.reverse.on, cardinality:linkDef.forward.has}, JSCompiler_object_inline_rev_409[linkDef.reverse.on][linkDef.reverse.label] = {entityName:linkDef.forward.on, cardinality:linkDef.reverse.has};\n    }\n    return Object.fromEntries(Object.entries(entities).map(([name, def]) => [name, new schemaTypes_1.EntityDef(def.attrs, Object.assign(Object.assign({}, JSCompiler_object_inline_fwd_408[name]), JSCompiler_object_inline_rev_409[name]))]));\n  }\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.i = void 0;\n  const schemaTypes_1 = require(\"module$node_modules$$instantdb$core$dist$schemaTypes\");\n  exports.i = {graph:function(entities, links) {\n    return new schemaTypes_1.InstantSchemaDef(enrichEntitiesWithLinks(entities, links), links, void 0);\n  }, schema:function({entities, links, rooms}) {\n    links = null !== links && void 0 !== links ? links : {};\n    rooms = null !== rooms && void 0 !== rooms ? rooms : {};\n    return new schemaTypes_1.InstantSchemaDef(enrichEntitiesWithLinks(entities, links), links, rooms);\n  }, entity:function(attrs) {\n    return new schemaTypes_1.EntityDef(attrs, {});\n  }, string:function() {\n    return new schemaTypes_1.DataAttrDef(\"string\", !0);\n  }, number:function() {\n    return new schemaTypes_1.DataAttrDef(\"number\", !0);\n  }, boolean:function() {\n    return new schemaTypes_1.DataAttrDef(\"boolean\", !0);\n  }, date:function() {\n    return new schemaTypes_1.DataAttrDef(\"date\", !0);\n  }, json:function() {\n    return new schemaTypes_1.DataAttrDef(\"json\", !0);\n  }, any:function() {\n    return new schemaTypes_1.DataAttrDef(\"json\", !0);\n  }};\n};\n","~:source","shadow$provide[\"module$node_modules$$instantdb$core$dist$schema\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.i = void 0;\nconst schemaTypes_1 = require(\"./schemaTypes\");\n// ==========\n// API\n/**\n * @deprecated\n * `i.graph` is deprecated. Use `i.schema` instead.\n *\n * @example\n * // Before\n * i.graph(entities, links).withRoomSchema<RoomType>();\n *\n * // After\n * i.schema({ entities, links, rooms })\n *\n * @see\n * https://instantdb.com/docs/schema\n */\nfunction graph(entities, links) {\n    return new schemaTypes_1.InstantSchemaDef(enrichEntitiesWithLinks(entities, links), \n    // (XXX): LinksDef<any> stems from TypeScript’s inability to reconcile the\n    // type EntitiesWithLinks<EntitiesWithoutLinks, Links> with\n    // EntitiesWithoutLinks. TypeScript is strict about ensuring that types are\n    // correctly aligned and does not allow for substituting a type that might\n    // be broader or have additional properties.\n    links, undefined);\n}\n/**\n * Creates an entity definition, to be used in conjunction with `i.graph`.\n *\n * @see https://instantdb.com/docs/schema\n * @example\n *   {\n *     posts: i.entity({\n *       title: i.string(),\n *       body: i.string(),\n *     }),\n *     comments: i.entity({\n *       body: i.string(),\n *     })\n *   }\n */\nfunction entity(attrs) {\n    return new schemaTypes_1.EntityDef(attrs, {});\n}\nfunction string() {\n    return new schemaTypes_1.DataAttrDef('string', true);\n}\nfunction number() {\n    return new schemaTypes_1.DataAttrDef('number', true);\n}\nfunction boolean() {\n    return new schemaTypes_1.DataAttrDef('boolean', true);\n}\nfunction date() {\n    return new schemaTypes_1.DataAttrDef('date', true);\n}\nfunction json() {\n    return new schemaTypes_1.DataAttrDef('json', true);\n}\nfunction any() {\n    return new schemaTypes_1.DataAttrDef('json', true);\n}\n// ==========\n// internal\nfunction enrichEntitiesWithLinks(entities, links) {\n    var _a, _b, _c, _d;\n    const linksIndex = { fwd: {}, rev: {} };\n    for (const linkDef of Object.values(links)) {\n        (_a = linksIndex.fwd)[_b = linkDef.forward.on] || (_a[_b] = {});\n        (_c = linksIndex.rev)[_d = linkDef.reverse.on] || (_c[_d] = {});\n        linksIndex.fwd[linkDef.forward.on][linkDef.forward.label] = {\n            entityName: linkDef.reverse.on,\n            cardinality: linkDef.forward.has,\n        };\n        linksIndex.rev[linkDef.reverse.on][linkDef.reverse.label] = {\n            entityName: linkDef.forward.on,\n            cardinality: linkDef.reverse.has,\n        };\n    }\n    const enrichedEntities = Object.fromEntries(Object.entries(entities).map(([name, def]) => [\n        name,\n        new schemaTypes_1.EntityDef(def.attrs, Object.assign(Object.assign({}, linksIndex.fwd[name]), linksIndex.rev[name])),\n    ]));\n    return enrichedEntities;\n}\n/**\n * Lets you define a schema for your database.\n *\n * You can define entities, links between entities, and if you use\n * presence, you can define rooms.\n *\n * You can push this schema to your database with the CLI,\n * or use it inside `init`, to get typesafety and autocompletion.\n *\n * @see https://instantdb.com/docs/schema\n * @example\n *   i.schema({\n *     entities: { },\n *     links: { },\n *     rooms: { }\n *   });\n */\nfunction schema({ entities, links, rooms, }) {\n    const linksDef = links !== null && links !== void 0 ? links : {};\n    const roomsDef = rooms !== null && rooms !== void 0 ? rooms : {};\n    return new schemaTypes_1.InstantSchemaDef(enrichEntitiesWithLinks(entities, linksDef), \n    // (XXX): LinksDef<any> stems from TypeScript’s inability to reconcile the\n    // type EntitiesWithLinks<EntitiesWithoutLinks, Links> with\n    // EntitiesWithoutLinks. TypeScript is strict about ensuring that types are\n    // correctly aligned and does not allow for substituting a type that might\n    // be broader or have additional properties.\n    linksDef, roomsDef);\n}\nexports.i = {\n    // constructs\n    graph,\n    schema,\n    entity,\n    // value types\n    string,\n    number,\n    boolean,\n    date,\n    json,\n    any,\n};\n//# sourceMappingURL=schema.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$$instantdb$core$dist$schemaTypes"]],"~:properties",["^5",["json","boolean","entityName","string","graph","__esModule","schema","any","value","number","i","date","cardinality","entity"]],"~:compiled-at",1756239699997,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$instantdb$core$dist$schema.js\",\n\"lineCount\":34,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@instantdb/core/dist/schema.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$instantdb$core$dist$schema\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.i = void 0;\\nconst schemaTypes_1 = require(\\\"./schemaTypes\\\");\\n// ==========\\n// API\\n/**\\n * @deprecated\\n * `i.graph` is deprecated. Use `i.schema` instead.\\n *\\n * @example\\n * // Before\\n * i.graph(entities, links).withRoomSchema<RoomType>();\\n *\\n * // After\\n * i.schema({ entities, links, rooms })\\n *\\n * @see\\n * https://instantdb.com/docs/schema\\n */\\nfunction graph(entities, links) {\\n    return new schemaTypes_1.InstantSchemaDef(enrichEntitiesWithLinks(entities, links), \\n    // (XXX): LinksDef<any> stems from TypeScript\\u2019s inability to reconcile the\\n    // type EntitiesWithLinks<EntitiesWithoutLinks, Links> with\\n    // EntitiesWithoutLinks. TypeScript is strict about ensuring that types are\\n    // correctly aligned and does not allow for substituting a type that might\\n    // be broader or have additional properties.\\n    links, undefined);\\n}\\n/**\\n * Creates an entity definition, to be used in conjunction with `i.graph`.\\n *\\n * @see https://instantdb.com/docs/schema\\n * @example\\n *   {\\n *     posts: i.entity({\\n *       title: i.string(),\\n *       body: i.string(),\\n *     }),\\n *     comments: i.entity({\\n *       body: i.string(),\\n *     })\\n *   }\\n */\\nfunction entity(attrs) {\\n    return new schemaTypes_1.EntityDef(attrs, {});\\n}\\nfunction string() {\\n    return new schemaTypes_1.DataAttrDef('string', true);\\n}\\nfunction number() {\\n    return new schemaTypes_1.DataAttrDef('number', true);\\n}\\nfunction boolean() {\\n    return new schemaTypes_1.DataAttrDef('boolean', true);\\n}\\nfunction date() {\\n    return new schemaTypes_1.DataAttrDef('date', true);\\n}\\nfunction json() {\\n    return new schemaTypes_1.DataAttrDef('json', true);\\n}\\nfunction any() {\\n    return new schemaTypes_1.DataAttrDef('json', true);\\n}\\n// ==========\\n// internal\\nfunction enrichEntitiesWithLinks(entities, links) {\\n    var _a, _b, _c, _d;\\n    const linksIndex = { fwd: {}, rev: {} };\\n    for (const linkDef of Object.values(links)) {\\n        (_a = linksIndex.fwd)[_b = linkDef.forward.on] || (_a[_b] = {});\\n        (_c = linksIndex.rev)[_d = linkDef.reverse.on] || (_c[_d] = {});\\n        linksIndex.fwd[linkDef.forward.on][linkDef.forward.label] = {\\n            entityName: linkDef.reverse.on,\\n            cardinality: linkDef.forward.has,\\n        };\\n        linksIndex.rev[linkDef.reverse.on][linkDef.reverse.label] = {\\n            entityName: linkDef.forward.on,\\n            cardinality: linkDef.reverse.has,\\n        };\\n    }\\n    const enrichedEntities = Object.fromEntries(Object.entries(entities).map(([name, def]) => [\\n        name,\\n        new schemaTypes_1.EntityDef(def.attrs, Object.assign(Object.assign({}, linksIndex.fwd[name]), linksIndex.rev[name])),\\n    ]));\\n    return enrichedEntities;\\n}\\n/**\\n * Lets you define a schema for your database.\\n *\\n * You can define entities, links between entities, and if you use\\n * presence, you can define rooms.\\n *\\n * You can push this schema to your database with the CLI,\\n * or use it inside `init`, to get typesafety and autocompletion.\\n *\\n * @see https://instantdb.com/docs/schema\\n * @example\\n *   i.schema({\\n *     entities: { },\\n *     links: { },\\n *     rooms: { }\\n *   });\\n */\\nfunction schema({ entities, links, rooms, }) {\\n    const linksDef = links !== null && links !== void 0 ? links : {};\\n    const roomsDef = rooms !== null && rooms !== void 0 ? rooms : {};\\n    return new schemaTypes_1.InstantSchemaDef(enrichEntitiesWithLinks(entities, linksDef), \\n    // (XXX): LinksDef<any> stems from TypeScript\\u2019s inability to reconcile the\\n    // type EntitiesWithLinks<EntitiesWithoutLinks, Links> with\\n    // EntitiesWithoutLinks. TypeScript is strict about ensuring that types are\\n    // correctly aligned and does not allow for substituting a type that might\\n    // be broader or have additional properties.\\n    linksDef, roomsDef);\\n}\\nexports.i = {\\n    // constructs\\n    graph,\\n    schema,\\n    entity,\\n    // value types\\n    string,\\n    number,\\n    boolean,\\n    date,\\n    json,\\n    any,\\n};\\n//# sourceMappingURL=schema.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"enrichEntitiesWithLinks\",\"entities\",\"links\",\"_a\",\"_b\",\"_c\",\"_d\",\"linkDef\",\"Object\",\"values\",\"fwd\",\"forward\",\"on\",\"rev\",\"reverse\",\"label\",\"entityName\",\"cardinality\",\"has\",\"fromEntries\",\"enrichedEntities\",\"entries\",\"map\",\"name\",\"def\",\"schemaTypes_1\",\"EntityDef\",\"attrs\",\"assign\",\"defineProperty\",\"value\",\"i\",\"graph\",\"InstantSchemaDef\",\"undefined\",\"schema\",\"rooms\",\"linksDef\",\"roomsDef\",\"entity\",\"string\",\"DataAttrDef\",\"number\",\"boolean\",\"date\",\"json\",\"any\"]\n}\n"]