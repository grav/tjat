["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@instantdb/core/dist/instatx.js"],"~:js","shadow$provide.module$node_modules$$instantdb$core$dist$instatx = function(global, require, module, exports) {\n  function transactionChunk(etype, id, prevOps) {\n    return new Proxy({}, {get:(_target, cmd) => \"__ops\" === cmd ? prevOps : args => transactionChunk(etype, id, [...prevOps, [cmd, etype, id, args]])});\n  }\n  function isLookup(k) {\n    return k.startsWith(\"lookup__\");\n  }\n  function parseLookup(k) {\n    const [, attribute, ...vJSON] = k.split(\"__\");\n    return [attribute, JSON.parse(vJSON.join(\"__\"))];\n  }\n  function etypeChunk(etype) {\n    return new Proxy({}, {get(_target, id) {\n      return isLookup(id) ? transactionChunk(etype, parseLookup(id), []) : transactionChunk(etype, id, []);\n    }});\n  }\n  function txInit() {\n    return new Proxy({}, {get(_target, ns) {\n      return etypeChunk(ns);\n    }});\n  }\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.tx = void 0;\n  exports.lookup = function(attribute, value) {\n    return `lookup__${attribute}__${JSON.stringify(value)}`;\n  };\n  exports.isLookup = isLookup;\n  exports.parseLookup = parseLookup;\n  exports.txInit = txInit;\n  exports.getOps = function(x) {\n    return x.__ops;\n  };\n  exports.tx = txInit();\n};\n","~:source","shadow$provide[\"module$node_modules$$instantdb$core$dist$instatx\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tx = void 0;\nexports.lookup = lookup;\nexports.isLookup = isLookup;\nexports.parseLookup = parseLookup;\nexports.txInit = txInit;\nexports.getOps = getOps;\nfunction transactionChunk(etype, id, prevOps) {\n    return new Proxy({}, {\n        get: (_target, cmd) => {\n            if (cmd === '__ops')\n                return prevOps;\n            return (args) => {\n                return transactionChunk(etype, id, [\n                    ...prevOps,\n                    [cmd, etype, id, args],\n                ]);\n            };\n        },\n    });\n}\n/**\n * Creates a lookup to use in place of an id in a transaction\n *\n * @example\n * db.tx.users[lookup('email', 'lyndon@example.com')].update({name: 'Lyndon'})\n */\nfunction lookup(attribute, value) {\n    return `lookup__${attribute}__${JSON.stringify(value)}`;\n}\nfunction isLookup(k) {\n    return k.startsWith('lookup__');\n}\nfunction parseLookup(k) {\n    const [_, attribute, ...vJSON] = k.split('__');\n    return [attribute, JSON.parse(vJSON.join('__'))];\n}\nfunction etypeChunk(etype) {\n    return new Proxy({}, {\n        get(_target, id) {\n            if (isLookup(id)) {\n                return transactionChunk(etype, parseLookup(id), []);\n            }\n            return transactionChunk(etype, id, []);\n        },\n    });\n}\nfunction txInit() {\n    return new Proxy({}, {\n        get(_target, ns) {\n            return etypeChunk(ns);\n        },\n    });\n}\n/**\n * A handy builder for changes.\n *\n * You must start with the `namespace` you want to change:\n *\n * @example\n *   db.tx.goals[goalId].update({title: \"Get fit\"})\n *   // Note: you don't need to create `goals` ahead of time.\n */\nexports.tx = txInit();\nfunction getOps(x) {\n    return x.__ops;\n}\n//# sourceMappingURL=instatx.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","lookup","getOps","value","txInit","tx","parseLookup","isLookup","get"]],"~:compiled-at",1756239699965,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$instantdb$core$dist$instatx.js\",\n\"lineCount\":35,\n\"mappings\":\"AAAAA,cAAA,CAAA,gDAAA,GAAqE,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAS7GC,UAASA,iBAAgB,CAACC,KAAD,EAAQC,EAAR,EAAYC,OAAZ,CAAqB;AAC1C,WAAO,IAAIC,KAAJ,CAAU,EAAV,EAAc,CACjBC,IAAK,CAACC,OAAD,EAAUC,GAAV,CAAAF,IACW,OAAZ,KAAIE,GAAJ,GACWJ,OADX,GAEQK,IAAD,IACIR,gBAAA,CAAiBC,KAAjB,EAAwBC,EAAxB,EAA4B,CAC/B,GAAGC,OAD4B,EAE/B,CAACI,GAAD,EAAMN,KAAN,EAAaC,EAAb,EAAiBM,IAAjB,CAF+B,CAA5B,CALE,CAAd,CAAP;AAD0C;AAuB9CC,UAASA,SAAQ,CAACC,CAAD,CAAI;AACjB,WAAOA,CAAEC,CAAAA,UAAF,CAAa,UAAb,CAAP;AADiB;AAGrBC,UAASA,YAAW,CAACF,CAAD,CAAI;AACpB,UAAM,CAAA,EAAIG,SAAJ,EAAe,GAAGC,KAAlB,CAAA,GAA2BJ,CAAEK,CAAAA,KAAF,CAAQ,IAAR,CAAjC;AACA,WAAO,CAACF,SAAD,EAAYG,IAAKC,CAAAA,KAAL,CAAWH,KAAMI,CAAAA,IAAN,CAAW,IAAX,CAAX,CAAZ,CAAP;AAFoB;AAIxBC,UAASA,WAAU,CAAClB,KAAD,CAAQ;AACvB,WAAO,IAAIG,KAAJ,CAAU,EAAV,EAAc,CACjBC,GAAG,CAACC,OAAD,EAAUJ,EAAV,CAAc;AACb,aAAIO,QAAA,CAASP,EAAT,CAAJ,GACWF,gBAAA,CAAiBC,KAAjB,EAAwBW,WAAA,CAAYV,EAAZ,CAAxB,EAAyC,EAAzC,CADX,GAGOF,gBAAA,CAAiBC,KAAjB,EAAwBC,EAAxB,EAA4B,EAA5B,CAHP;AADa,KADA,CAAd,CAAP;AADuB;AAU3BkB,UAASA,OAAM,EAAG;AACd,WAAO,IAAIhB,KAAJ,CAAU,EAAV,EAAc,CACjBC,GAAG,CAACC,OAAD,EAAUe,EAAV,CAAc;AACb,aAAOF,UAAA,CAAWE,EAAX,CAAP;AADa,KADA,CAAd,CAAP;AADc;AA/ClBC,QAAOC,CAAAA,cAAP,CAAsBxB,OAAtB,EAA+B,YAA/B,EAA6C,CAAEyB,MAAO,CAAA,CAAT,CAA7C,CAAA;AACAzB,SAAQ0B,CAAAA,EAAR,GAAa,IAAK,EAAlB;AACA1B,SAAQ2B,CAAAA,MAAR,GAyBAA,QAAe,CAACb,SAAD,EAAYW,KAAZ,CAAmB;AAC9B,WAAQ,WAAUX,SAAV,KAAwBG,IAAKW,CAAAA,SAAL,CAAeH,KAAf,CAAxB,EAAR;AAD8B,GAzBlC;AACAzB,SAAQU,CAAAA,QAAR,GAAmBA,QAAnB;AACAV,SAAQa,CAAAA,WAAR,GAAsBA,WAAtB;AACAb,SAAQqB,CAAAA,MAAR,GAAiBA,MAAjB;AACArB,SAAQ6B,CAAAA,MAAR,GA0DAA,QAAe,CAACC,CAAD,CAAI;AACf,WAAOA,CAAEC,CAAAA,KAAT;AADe,GA1DnB;AAyDA/B,SAAQ0B,CAAAA,EAAR,GAAaL,MAAA,EAAb;AAjE6G,CAA7G;;\",\n\"sources\":[\"node_modules/@instantdb/core/dist/instatx.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$instantdb$core$dist$instatx\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.tx = void 0;\\nexports.lookup = lookup;\\nexports.isLookup = isLookup;\\nexports.parseLookup = parseLookup;\\nexports.txInit = txInit;\\nexports.getOps = getOps;\\nfunction transactionChunk(etype, id, prevOps) {\\n    return new Proxy({}, {\\n        get: (_target, cmd) => {\\n            if (cmd === '__ops')\\n                return prevOps;\\n            return (args) => {\\n                return transactionChunk(etype, id, [\\n                    ...prevOps,\\n                    [cmd, etype, id, args],\\n                ]);\\n            };\\n        },\\n    });\\n}\\n/**\\n * Creates a lookup to use in place of an id in a transaction\\n *\\n * @example\\n * db.tx.users[lookup('email', 'lyndon@example.com')].update({name: 'Lyndon'})\\n */\\nfunction lookup(attribute, value) {\\n    return `lookup__${attribute}__${JSON.stringify(value)}`;\\n}\\nfunction isLookup(k) {\\n    return k.startsWith('lookup__');\\n}\\nfunction parseLookup(k) {\\n    const [_, attribute, ...vJSON] = k.split('__');\\n    return [attribute, JSON.parse(vJSON.join('__'))];\\n}\\nfunction etypeChunk(etype) {\\n    return new Proxy({}, {\\n        get(_target, id) {\\n            if (isLookup(id)) {\\n                return transactionChunk(etype, parseLookup(id), []);\\n            }\\n            return transactionChunk(etype, id, []);\\n        },\\n    });\\n}\\nfunction txInit() {\\n    return new Proxy({}, {\\n        get(_target, ns) {\\n            return etypeChunk(ns);\\n        },\\n    });\\n}\\n/**\\n * A handy builder for changes.\\n *\\n * You must start with the `namespace` you want to change:\\n *\\n * @example\\n *   db.tx.goals[goalId].update({title: \\\"Get fit\\\"})\\n *   // Note: you don't need to create `goals` ahead of time.\\n */\\nexports.tx = txInit();\\nfunction getOps(x) {\\n    return x.__ops;\\n}\\n//# sourceMappingURL=instatx.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"transactionChunk\",\"etype\",\"id\",\"prevOps\",\"Proxy\",\"get\",\"_target\",\"cmd\",\"args\",\"isLookup\",\"k\",\"startsWith\",\"parseLookup\",\"attribute\",\"vJSON\",\"split\",\"JSON\",\"parse\",\"join\",\"etypeChunk\",\"txInit\",\"ns\",\"Object\",\"defineProperty\",\"value\",\"tx\",\"lookup\",\"stringify\",\"getOps\",\"x\",\"__ops\"]\n}\n"]