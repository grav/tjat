["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@instantdb/core/dist/utils/PersistedObject.js"],"~:js","shadow$provide.module$node_modules$$instantdb$core$dist$utils$PersistedObject = function(global, require, module, exports) {\n  var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function(resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.PersistedObject = void 0;\n  class PersistedObject {\n    constructor(persister, key, defaultValue, onMerge, toJSON = x => JSON.stringify(x), fromJSON = x => JSON.parse(x), saveThrottleMs = 100) {\n      this._subs = [];\n      this._persister = persister;\n      this._key = key;\n      this._onMerge = onMerge;\n      this._loadedCbs = [];\n      this._isLoading = !0;\n      this.currentValue = defaultValue;\n      this.toJSON = toJSON;\n      this.fromJSON = fromJSON;\n      this._saveThrottleMs = saveThrottleMs;\n      this._pendingSaveCbs = [];\n      this._version = 0;\n      this._load();\n    }\n    _load() {\n      return __awaiter(this, void 0, void 0, function*() {\n        const fromStorage = this.fromJSON(yield this._persister.getItem(this._key));\n        this._isLoading = !1;\n        this._onMerge(fromStorage, this.currentValue);\n        for (const cb of this._loadedCbs) {\n          cb();\n        }\n      });\n    }\n    waitForLoaded() {\n      return __awaiter(this, void 0, void 0, function*() {\n        this._isLoading && (yield new Promise(resolve => {\n          this._loadedCbs.push(resolve);\n        }));\n      });\n    }\n    isLoading() {\n      return this._isLoading;\n    }\n    version() {\n      return this._version;\n    }\n    waitForSync() {\n      return __awaiter(this, void 0, void 0, function*() {\n        this._nextSave && (yield new Promise(resolve => {\n          this._pendingSaveCbs.push(resolve);\n        }));\n      });\n    }\n    _writeToStorage() {\n      this._persister.setItem(this._key, this.toJSON(this.currentValue));\n      for (const cb of this._pendingSaveCbs) {\n        cb();\n      }\n      this._pendingSaveCbs.length = 0;\n    }\n    flush() {\n      return __awaiter(this, void 0, void 0, function*() {\n        this._nextSave && (clearTimeout(this._nextSave), this._writeToStorage());\n      });\n    }\n    _enqueuePersist(cb) {\n      this._nextSave ? cb && this._pendingSaveCbs.push(cb) : this._nextSave = setTimeout(() => {\n        this._nextSave = null;\n        this._writeToStorage();\n      }, this._saveThrottleMs);\n    }\n    set(f, cb) {\n      this._version++;\n      this.currentValue = f(this.currentValue);\n      this._isLoading ? this._loadedCbs.push(() => this._enqueuePersist(cb)) : this._enqueuePersist(cb);\n      for (const sub of this._subs) {\n        sub(this.currentValue);\n      }\n    }\n    subscribe(cb) {\n      this._subs.push(cb);\n      cb(this.currentValue);\n      return () => {\n        this._subs = this._subs.filter(x => x !== cb);\n      };\n    }\n  }\n  exports.PersistedObject = PersistedObject;\n};\n","~:source","shadow$provide[\"module$node_modules$$instantdb$core$dist$utils$PersistedObject\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PersistedObject = void 0;\n// PersistedObjects save data outside of memory.\n//\n// When we load a persisted object, it's possible we call `set`\n// before we finish loading. To address we handle set in two ways:\n//\n// 1. Before load\n// We simply update currentValue in memory\n//\n// 2. After load\n// We update currentValue in memory and in storage\n//\n// Each PersistedObject provides it's own `onMerge`\n// function to handle the merge of data from storage and memory\n// on load\nclass PersistedObject {\n    constructor(persister, key, defaultValue, onMerge, toJSON = (x) => {\n        return JSON.stringify(x);\n    }, fromJSON = (x) => {\n        return JSON.parse(x);\n    }, saveThrottleMs = 100) {\n        this._subs = [];\n        this._persister = persister;\n        this._key = key;\n        this._onMerge = onMerge;\n        this._loadedCbs = [];\n        this._isLoading = true;\n        this.currentValue = defaultValue;\n        this.toJSON = toJSON;\n        this.fromJSON = fromJSON;\n        this._saveThrottleMs = saveThrottleMs;\n        this._pendingSaveCbs = [];\n        this._version = 0;\n        this._load();\n    }\n    _load() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const fromStorage = this.fromJSON(yield this._persister.getItem(this._key));\n            this._isLoading = false;\n            this._onMerge(fromStorage, this.currentValue);\n            for (const cb of this._loadedCbs) {\n                cb();\n            }\n        });\n    }\n    waitForLoaded() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._isLoading) {\n                return;\n            }\n            const loadedPromise = new Promise((resolve) => {\n                this._loadedCbs.push(resolve);\n            });\n            yield loadedPromise;\n        });\n    }\n    isLoading() {\n        return this._isLoading;\n    }\n    version() {\n        return this._version;\n    }\n    waitForSync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._nextSave) {\n                return;\n            }\n            const syncedPromise = new Promise((resolve) => {\n                this._pendingSaveCbs.push(resolve);\n            });\n            yield syncedPromise;\n        });\n    }\n    _writeToStorage() {\n        this._persister.setItem(this._key, this.toJSON(this.currentValue));\n        for (const cb of this._pendingSaveCbs) {\n            cb();\n        }\n        this._pendingSaveCbs.length = 0;\n    }\n    flush() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this._nextSave) {\n                return;\n            }\n            clearTimeout(this._nextSave);\n            this._writeToStorage();\n        });\n    }\n    _enqueuePersist(cb) {\n        if (this._nextSave) {\n            if (cb) {\n                this._pendingSaveCbs.push(cb);\n            }\n            return;\n        }\n        this._nextSave = setTimeout(() => {\n            this._nextSave = null;\n            this._writeToStorage();\n        }, this._saveThrottleMs);\n    }\n    set(f, cb) {\n        this._version++;\n        this.currentValue = f(this.currentValue);\n        if (this._isLoading) {\n            this._loadedCbs.push(() => this._enqueuePersist(cb));\n        }\n        else {\n            this._enqueuePersist(cb);\n        }\n        for (const sub of this._subs) {\n            sub(this.currentValue);\n        }\n    }\n    subscribe(cb) {\n        this._subs.push(cb);\n        cb(this.currentValue);\n        return () => {\n            this._subs = this._subs.filter((x) => x !== cb);\n        };\n    }\n}\nexports.PersistedObject = PersistedObject;\n//# sourceMappingURL=PersistedObject.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["_saveThrottleMs","_key","_loadedCbs","fromJSON","_subs","__esModule","_persister","PersistedObject","value","_onMerge","_isLoading","_pendingSaveCbs","length","currentValue","_version","toJSON","_nextSave"]],"~:compiled-at",1756239699976,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$instantdb$core$dist$utils$PersistedObject.js\",\n\"lineCount\":113,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@instantdb/core/dist/utils/PersistedObject.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$instantdb$core$dist$utils$PersistedObject\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\\n    return new (P || (P = Promise))(function (resolve, reject) {\\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\\n        function rejected(value) { try { step(generator[\\\"throw\\\"](value)); } catch (e) { reject(e); } }\\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\\n    });\\n};\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nexports.PersistedObject = void 0;\\n// PersistedObjects save data outside of memory.\\n//\\n// When we load a persisted object, it's possible we call `set`\\n// before we finish loading. To address we handle set in two ways:\\n//\\n// 1. Before load\\n// We simply update currentValue in memory\\n//\\n// 2. After load\\n// We update currentValue in memory and in storage\\n//\\n// Each PersistedObject provides it's own `onMerge`\\n// function to handle the merge of data from storage and memory\\n// on load\\nclass PersistedObject {\\n    constructor(persister, key, defaultValue, onMerge, toJSON = (x) => {\\n        return JSON.stringify(x);\\n    }, fromJSON = (x) => {\\n        return JSON.parse(x);\\n    }, saveThrottleMs = 100) {\\n        this._subs = [];\\n        this._persister = persister;\\n        this._key = key;\\n        this._onMerge = onMerge;\\n        this._loadedCbs = [];\\n        this._isLoading = true;\\n        this.currentValue = defaultValue;\\n        this.toJSON = toJSON;\\n        this.fromJSON = fromJSON;\\n        this._saveThrottleMs = saveThrottleMs;\\n        this._pendingSaveCbs = [];\\n        this._version = 0;\\n        this._load();\\n    }\\n    _load() {\\n        return __awaiter(this, void 0, void 0, function* () {\\n            const fromStorage = this.fromJSON(yield this._persister.getItem(this._key));\\n            this._isLoading = false;\\n            this._onMerge(fromStorage, this.currentValue);\\n            for (const cb of this._loadedCbs) {\\n                cb();\\n            }\\n        });\\n    }\\n    waitForLoaded() {\\n        return __awaiter(this, void 0, void 0, function* () {\\n            if (!this._isLoading) {\\n                return;\\n            }\\n            const loadedPromise = new Promise((resolve) => {\\n                this._loadedCbs.push(resolve);\\n            });\\n            yield loadedPromise;\\n        });\\n    }\\n    isLoading() {\\n        return this._isLoading;\\n    }\\n    version() {\\n        return this._version;\\n    }\\n    waitForSync() {\\n        return __awaiter(this, void 0, void 0, function* () {\\n            if (!this._nextSave) {\\n                return;\\n            }\\n            const syncedPromise = new Promise((resolve) => {\\n                this._pendingSaveCbs.push(resolve);\\n            });\\n            yield syncedPromise;\\n        });\\n    }\\n    _writeToStorage() {\\n        this._persister.setItem(this._key, this.toJSON(this.currentValue));\\n        for (const cb of this._pendingSaveCbs) {\\n            cb();\\n        }\\n        this._pendingSaveCbs.length = 0;\\n    }\\n    flush() {\\n        return __awaiter(this, void 0, void 0, function* () {\\n            if (!this._nextSave) {\\n                return;\\n            }\\n            clearTimeout(this._nextSave);\\n            this._writeToStorage();\\n        });\\n    }\\n    _enqueuePersist(cb) {\\n        if (this._nextSave) {\\n            if (cb) {\\n                this._pendingSaveCbs.push(cb);\\n            }\\n            return;\\n        }\\n        this._nextSave = setTimeout(() => {\\n            this._nextSave = null;\\n            this._writeToStorage();\\n        }, this._saveThrottleMs);\\n    }\\n    set(f, cb) {\\n        this._version++;\\n        this.currentValue = f(this.currentValue);\\n        if (this._isLoading) {\\n            this._loadedCbs.push(() => this._enqueuePersist(cb));\\n        }\\n        else {\\n            this._enqueuePersist(cb);\\n        }\\n        for (const sub of this._subs) {\\n            sub(this.currentValue);\\n        }\\n    }\\n    subscribe(cb) {\\n        this._subs.push(cb);\\n        cb(this.currentValue);\\n        return () => {\\n            this._subs = this._subs.filter((x) => x !== cb);\\n        };\\n    }\\n}\\nexports.PersistedObject = PersistedObject;\\n//# sourceMappingURL=PersistedObject.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"__awaiter\",\"thisArg\",\"_arguments\",\"P\",\"generator\",\"adopt\",\"value\",\"resolve\",\"Promise\",\"reject\",\"fulfilled\",\"step\",\"next\",\"e\",\"rejected\",\"result\",\"done\",\"then\",\"apply\",\"Object\",\"defineProperty\",\"PersistedObject\",\"constructor\",\"persister\",\"key\",\"defaultValue\",\"onMerge\",\"toJSON\",\"x\",\"JSON\",\"stringify\",\"fromJSON\",\"parse\",\"saveThrottleMs\",\"_subs\",\"_persister\",\"_key\",\"_onMerge\",\"_loadedCbs\",\"_isLoading\",\"currentValue\",\"_saveThrottleMs\",\"_pendingSaveCbs\",\"_version\",\"_load\",\"fromStorage\",\"getItem\",\"cb\",\"waitForLoaded\",\"loadedPromise\",\"push\",\"isLoading\",\"version\",\"waitForSync\",\"_nextSave\",\"syncedPromise\",\"_writeToStorage\",\"setItem\",\"length\",\"flush\",\"clearTimeout\",\"_enqueuePersist\",\"setTimeout\",\"set\",\"f\",\"sub\",\"subscribe\",\"filter\"]\n}\n"]